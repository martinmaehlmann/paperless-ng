NAME: chart-1628442540
LAST DEPLOYED: Sun Aug  8 19:09:01 2021
NAMESPACE: paperless-ng
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
gotenberg:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: thecodingmachine/gotenberg
    tag: ""
  imagePull1rets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  replicas: 1
  resources:
    limits:
      cpu: "0.2"
      memory: 512Mi
    requests:
      cpu: "0.2"
      memory: 512Mi
  securityContext: {}
  service:
    port: 3000
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
paperless:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  config:
    PAPERLESS_ALLOWED_HOSTS: '*'
    PAPERLESS_CORS_ALLOWED_HOSTS: http://localhost:8000
    PAPERLESS_DBHOST: postgres
    PAPERLESS_OCR_CLEAN: clean-final
    PAPERLESS_OCR_DESKEW: "true"
    PAPERLESS_OCR_LANGUAGE: deu
    PAPERLESS_OCR_MODE: skip
    PAPERLESS_OCR_OUTPUT_TYPE: pdfa
    PAPERLESS_OCR_PAGES: "0"
    PAPERLESS_OCR_ROTATE_PAGES: "true"
    PAPERLESS_OCR_ROTATE_PAGES_THRESHOLD: "12"
    PAPERLESS_OCR_USER_ARGS: ""
    PAPERLESS_REDIS: redis://redis:6379
    PAPERLESS_TIKA_ENABLED: "1"
    PAPERLESS_TIKA_ENDPOINT: http://tika:9998
    PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
    PAPERLESS_TIME_ZONE: Europe/Berlin
    database:
      hostname: postgres
    gotenberg:
      endpoint: http://gotenberg:3000
    ocr:
      clean: clean-final
      deskew: true
      language: deu
      mode: skip
      outputType: pdfa
      pages: 0
      rotatePages:
        enabled: true
        threshold: 12
    paperless:
      allowedHosts: '*'
      corsAllowedHosts: http://localhost:8000
      timeZone: Europe/Berlin
    redis:
      endpoint: redis://redis:6379
    tika:
      enabled: 1
      endpoint: http://tika:9998
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: Always
    repository: jonaswinkler/paperless-ng
    tag: 1.4.4
  imagePullSecrets: []
  ingress:
    annotations: {}
    certManager:
      enabled: false
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - backend:
          serviceName: chart-example.local
          servicePort: 80
        path: /
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  resources: {}
  secrets:
    secretKey:
      key: foo-bar
    superUserPassword:
      email: foo@bar.com
      password: admin
      username: admin
  securityContext: {}
  service:
    port: 8000
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
postgresql:
  extraEnv: []
  global:
    postgresql: {}
  image:
    debug: false
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/postgresql
    tag: 13
  ldap:
    baseDN: ""
    bindDN: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    search_attr: ""
    search_filter: ""
    server: ""
    suffix: ""
    tls: false
    url: ""
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  master:
    affinity: {}
    annotations: {}
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    sidecars: []
    tolerations: []
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.8.0-debian-10-r42
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
  networkPolicy:
    allowExternal: true
    enabled: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /bitnami/postgresql
    size: 8Gi
    subPath: ""
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlUsername: postgres
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    slaveReplicas: 1
    synchronousCommit: "off"
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  serviceAccount:
    enabled: false
  shmVolume:
    chmod:
      enabled: true
    enabled: true
  slave:
    affinity: {}
    annotations: {}
    extraInitContainers: |
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    sidecars: []
    tolerations: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: false
    extraEnv: []
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: "10"
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      subPath: ""
    postgresqlDatabase: null
    postgresqlPassword: null
    postgresqlUsername: postgres
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    securityContext:
      runAsUser: 0
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
redis:
  architecture: replication
  auth:
    enabled: true
    password: ""
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: null
      redis: {}
      storageClass: null
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  existingConfigmap: null
  extraDeploy: []
  fullnameOverride: null
  global:
    imagePullSecrets: []
    imageRegistry: null
    redis: {}
    storageClass: null
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.3-debian-10-r0
  kubeVersion: null
  master:
    affinity: {}
    args: []
    command: []
    containerPort: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraEnvVars: []
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      path: /data
      selector: {}
      size: 8Gi
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      loadBalancerSourceRanges: []
      port: 6379
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: {}
    spreadConstraints: {}
    terminationGracePeriodSeconds: 30
    tolerations: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: false
    extraArgs: {}
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.23.0-debian-10-r8
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      rules: []
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    sentinel:
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      enabled: false
      extraArgs: {}
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/redis-sentinel-exporter
        tag: 1.7.1-debian-10-r131
      resources:
        limits: {}
        requests: {}
      service:
        annotations: {}
        externalTrafficPolicy: Cluster
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        port: 9355
        type: ClusterIP
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      relabellings: []
  nameOverride: null
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    minAvailable: 1
  podSecurityPolicy:
    create: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    command: []
    containerPort: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraEnvVars: []
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      path: /data
      selector: {}
      size: 8Gi
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      loadBalancerSourceRanges: []
      port: 6379
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: {}
    spreadConstraints: {}
    terminationGracePeriodSeconds: 30
    tolerations: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  sentinel:
    args: []
    cleanDelaySeconds: 5
    command: []
    containerPort: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 18000
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.2-debian-10-r12
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      loadBalancerSourceRanges: []
      nodePorts: {}
      port: 6379
      sentinelPort: 26379
      type: ClusterIP
    staticID: false
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  sysctl:
    command: []
    enabled: false
    image:
      pullPolicy: Always
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: "10"
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    enabled: false
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: Always
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: "10"
    resources:
      limits: {}
      requests: {}
tika:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: apache/tika
    tag: "1.26"
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  replicas: 1
  resources: {}
  securityContext: {}
  service:
    port: 9998
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []

HOOKS:
---
# Source: paperless-ng/charts/gotenberg/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chart-1628442540-gotenberg-test-connection"
  labels:
    helm.sh/chart: gotenberg-0.0.1
    app.kubernetes.io/name: gotenberg
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.4.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['chart-1628442540-gotenberg:3000']
  restartPolicy: Never
---
# Source: paperless-ng/charts/paperless/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chart-1628442540-paperless-test-connection"
  labels:
    helm.sh/chart: paperless-0.1.0
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['chart-1628442540-paperless:8000']
  restartPolicy: Never
---
# Source: paperless-ng/charts/tika/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chart-1628442540-tika-test-connection"
  labels:
    helm.sh/chart: tika-0.0.1
    app.kubernetes.io/name: tika
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.26"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['chart-1628442540-tika:9998']
  restartPolicy: Never
MANIFEST:
---
# Source: paperless-ng/charts/gotenberg/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chart-1628442540-gotenberg
  labels:
    helm.sh/chart: gotenberg-0.0.1
    app.kubernetes.io/name: gotenberg
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.4.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: paperless-ng/charts/paperless/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chart-1628442540-paperless
  labels:
    helm.sh/chart: paperless-0.1.0
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: paperless-ng/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chart-1628442540-redis
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
---
# Source: paperless-ng/charts/tika/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chart-1628442540-tika
  labels:
    helm.sh/chart: tika-0.0.1
    app.kubernetes.io/name: tika
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.26"
    app.kubernetes.io/managed-by: Helm
---
# Source: paperless-ng/charts/paperless/templates/secret-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chart-1628442540-paperless-secret-key
type: Opaque
data:
  PAPERLESS_SECRET_KEY: "Zm9vLWJhcg=="
---
# Source: paperless-ng/charts/paperless/templates/superuser-password.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chart-1628442540-paperless-super-user
type: Opaque
data:
  USERNAME: "YWRtaW4="
  DJANGO_SUPERUSER_PASSWORD: "YWRtaW4="
  EMAIL: "Zm9vQGJhci5jb20="
---
# Source: paperless-ng/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chart-1628442540-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "chart-1628442540"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "YjNja0VXMWVSeQ=="
---
# Source: paperless-ng/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chart-1628442540-redis
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "U0xJZksyMHVocQ=="
---
# Source: paperless-ng/charts/paperless/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chart-1628442540-paperless
  labels:
    helm.sh/chart: paperless-0.1.0
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  PAPERLESS_TIME_ZONE: "Europe/Berlin"
  PAPERLESS_OCR_USER_ARGS: ""
  PAPERLESS_ALLOWED_HOSTS: "*"
  PAPERLESS_CORS_ALLOWED_HOSTS: "http://localhost:8000"
  PAPERLESS_TIKA_ENABLED: "1"
  PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://gotenberg:3000"
  PAPERLESS_TIKA_ENDPOINT: "http://tika:9998"
  PAPERLESS_REDIS: "redis://redis:6379"
  PAPERLESS_DBHOST: "postgres"
  PAPERLESS_OCR_LANGUAGE: "deu"
  PAPERLESS_OCR_MODE: "skip"
  PAPERLESS_OCR_CLEAN: "clean-final"
  PAPERLESS_OCR_DESKEW: "true"
  PAPERLESS_OCR_ROTATE_PAGES: "true"
  PAPERLESS_OCR_ROTATE_PAGES_THRESHOLD: "12"
  PAPERLESS_OCR_OUTPUT_TYPE: "pdfa"
  PAPERLESS_OCR_PAGES: "0"
---
# Source: paperless-ng/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chart-1628442540-redis-configuration
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: paperless-ng/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chart-1628442540-redis-health
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: paperless-ng/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chart-1628442540-redis-scripts
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: paperless-ng/charts/gotenberg/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-gotenberg
  labels:
    helm.sh/chart: gotenberg-0.0.1
    app.kubernetes.io/name: gotenberg
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.4.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: gotenberg
    app.kubernetes.io/instance: chart-1628442540
---
# Source: paperless-ng/charts/paperless/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-paperless
  labels:
    helm.sh/chart: paperless-0.1.0
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
---
# Source: paperless-ng/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "chart-1628442540"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "chart-1628442540"
---
# Source: paperless-ng/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "chart-1628442540"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "chart-1628442540"
    role: master
---
# Source: paperless-ng/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-redis-headless
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: chart-1628442540
---
# Source: paperless-ng/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-redis-master
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/component: master
---
# Source: paperless-ng/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-redis-replicas
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/component: replica
---
# Source: paperless-ng/charts/tika/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chart-1628442540-tika
  labels:
    helm.sh/chart: tika-0.0.1
    app.kubernetes.io/name: tika
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.26"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9998
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: tika
    app.kubernetes.io/instance: chart-1628442540
---
# Source: paperless-ng/charts/gotenberg/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chart-1628442540-gotenberg
  labels:
    helm.sh/chart: gotenberg-0.0.1
    app.kubernetes.io/name: gotenberg
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.4.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gotenberg
      app.kubernetes.io/instance: chart-1628442540
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gotenberg
        app.kubernetes.io/instance: chart-1628442540
    spec:
      serviceAccountName: chart-1628442540-gotenberg
      securityContext:
        {}
      containers:
        - name: gotenberg
          securityContext:
            {}
          image: "thecodingmachine/gotenberg:1.4.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: DISABLE_GOOGLE_CHROME
              value: "1"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
          readinessProbe:
            httpGet:
              path: /
              port: 3000
          resources:
            limits:
              cpu: "0.2"
              memory: 512Mi
            requests:
              cpu: "0.2"
              memory: 512Mi
---
# Source: paperless-ng/charts/paperless/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chart-1628442540-paperless
  labels:
    helm.sh/chart: paperless-0.1.0
    app.kubernetes.io/name: paperless
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: paperless
      app.kubernetes.io/instance: chart-1628442540
  template:
    metadata:
      labels:
        app.kubernetes.io/name: paperless
        app.kubernetes.io/instance: chart-1628442540
    spec:
      serviceAccountName: chart-1628442540-paperless
      securityContext:
        {}
      containers:
        - name: paperless
          securityContext:
            {}
          image: "jonaswinkler/paperless-ng:1.4.4"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: paperless-ng/charts/tika/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chart-1628442540-tika
  labels:
    helm.sh/chart: tika-0.0.1
    app.kubernetes.io/name: tika
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/version: "1.26"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tika
      app.kubernetes.io/instance: chart-1628442540
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tika
        app.kubernetes.io/instance: chart-1628442540
    spec:
      serviceAccountName: chart-1628442540-tika
      securityContext:
        {}
      containers:
        - name: tika
          securityContext:
            {}
          image: "apache/tika:1.26"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9998
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: paperless-ng/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chart-1628442540-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "chart-1628442540"
    heritage: "Helm"
spec:
  serviceName: chart-1628442540-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "chart-1628442540"
      role: master
  template:
    metadata:
      name: chart-1628442540-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "chart-1628442540"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']
        
      containers:
        - name: chart-1628442540-postgresql
          image: docker.io/bitnami/postgresql:13
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chart-1628442540-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: paperless-ng/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chart-1628442540-redis-master
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: chart-1628442540
      app.kubernetes.io/component: master
  serviceName: chart-1628442540-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-14.1.1
        app.kubernetes.io/instance: chart-1628442540
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 1dffeecb19307580f2b4d9270567d1b57341d59717725247e58c9711de3d8ee9
        checksum/health: b17c9ac0dd27ccb04c5b84d6cd0d5bd66d2043ea5b9d070510ec18caaeb125eb
        checksum/scripts: cad2f731e0fe427d79fe5ef04f2729baea166b97f79e8b9ec2e3374b9d5f91b5
        checksum/secret: 46b9514c12a33506e262ca441bcff1de6e417f0e23559177e33de54b0d30f41b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: chart-1628442540-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: chart-1628442540
                    app.kubernetes.io/component: master
                namespaces:
                  - "paperless-ng"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.3-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chart-1628442540-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: chart-1628442540-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: chart-1628442540-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: chart-1628442540-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: chart-1628442540
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: paperless-ng/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chart-1628442540-redis-replicas
  namespace: "paperless-ng"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.1.1
    app.kubernetes.io/instance: chart-1628442540
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: chart-1628442540
      app.kubernetes.io/component: replica
  serviceName: chart-1628442540-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-14.1.1
        app.kubernetes.io/instance: chart-1628442540
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 1dffeecb19307580f2b4d9270567d1b57341d59717725247e58c9711de3d8ee9
        checksum/health: b17c9ac0dd27ccb04c5b84d6cd0d5bd66d2043ea5b9d070510ec18caaeb125eb
        checksum/scripts: cad2f731e0fe427d79fe5ef04f2729baea166b97f79e8b9ec2e3374b9d5f91b5
        checksum/secret: abadfefbddb5dfdb7406517620dfe509a8c09e5c791c78035dfdb628b77c7dd5
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: chart-1628442540-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: chart-1628442540
                    app.kubernetes.io/component: replica
                namespaces:
                  - "paperless-ng"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.3-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: chart-1628442540-redis-master-0.chart-1628442540-redis-headless.paperless-ng.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chart-1628442540-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chart-1628442540-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: chart-1628442540-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: chart-1628442540-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: chart-1628442540-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: chart-1628442540
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace paperless-ng -l "app.kubernetes.io/name=paperless-ng,app.kubernetes.io/instance=chart-1628442540" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace paperless-ng $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace paperless-ng port-forward $POD_NAME 8080:$CONTAINER_PORT
